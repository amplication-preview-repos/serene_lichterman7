/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePontoDeEntregaArgs } from "./CreatePontoDeEntregaArgs";
import { UpdatePontoDeEntregaArgs } from "./UpdatePontoDeEntregaArgs";
import { DeletePontoDeEntregaArgs } from "./DeletePontoDeEntregaArgs";
import { PontoDeEntregaCountArgs } from "./PontoDeEntregaCountArgs";
import { PontoDeEntregaFindManyArgs } from "./PontoDeEntregaFindManyArgs";
import { PontoDeEntregaFindUniqueArgs } from "./PontoDeEntregaFindUniqueArgs";
import { PontoDeEntrega } from "./PontoDeEntrega";
import { Viagem } from "../../viagem/base/Viagem";
import { PontoDeEntregaService } from "../pontoDeEntrega.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PontoDeEntrega)
export class PontoDeEntregaResolverBase {
  constructor(
    protected readonly service: PontoDeEntregaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PontoDeEntrega",
    action: "read",
    possession: "any",
  })
  async _pontoDeEntregasMeta(
    @graphql.Args() args: PontoDeEntregaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PontoDeEntrega])
  @nestAccessControl.UseRoles({
    resource: "PontoDeEntrega",
    action: "read",
    possession: "any",
  })
  async pontoDeEntregas(
    @graphql.Args() args: PontoDeEntregaFindManyArgs
  ): Promise<PontoDeEntrega[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PontoDeEntrega, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PontoDeEntrega",
    action: "read",
    possession: "own",
  })
  async pontoDeEntrega(
    @graphql.Args() args: PontoDeEntregaFindUniqueArgs
  ): Promise<PontoDeEntrega | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PontoDeEntrega)
  @nestAccessControl.UseRoles({
    resource: "PontoDeEntrega",
    action: "create",
    possession: "any",
  })
  async createPontoDeEntrega(
    @graphql.Args() args: CreatePontoDeEntregaArgs
  ): Promise<PontoDeEntrega> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        viagemId: {
          connect: args.data.viagemId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PontoDeEntrega)
  @nestAccessControl.UseRoles({
    resource: "PontoDeEntrega",
    action: "update",
    possession: "any",
  })
  async updatePontoDeEntrega(
    @graphql.Args() args: UpdatePontoDeEntregaArgs
  ): Promise<PontoDeEntrega | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          viagemId: {
            connect: args.data.viagemId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PontoDeEntrega)
  @nestAccessControl.UseRoles({
    resource: "PontoDeEntrega",
    action: "delete",
    possession: "any",
  })
  async deletePontoDeEntrega(
    @graphql.Args() args: DeletePontoDeEntregaArgs
  ): Promise<PontoDeEntrega | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Viagem, {
    nullable: true,
    name: "viagemId",
  })
  @nestAccessControl.UseRoles({
    resource: "Viagem",
    action: "read",
    possession: "any",
  })
  async resolveFieldViagemId(
    @graphql.Parent() parent: PontoDeEntrega
  ): Promise<Viagem | null> {
    const result = await this.service.getViagemId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
