/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateComprovanteArgs } from "./CreateComprovanteArgs";
import { UpdateComprovanteArgs } from "./UpdateComprovanteArgs";
import { DeleteComprovanteArgs } from "./DeleteComprovanteArgs";
import { ComprovanteCountArgs } from "./ComprovanteCountArgs";
import { ComprovanteFindManyArgs } from "./ComprovanteFindManyArgs";
import { ComprovanteFindUniqueArgs } from "./ComprovanteFindUniqueArgs";
import { Comprovante } from "./Comprovante";
import { Viagem } from "../../viagem/base/Viagem";
import { ComprovanteService } from "../comprovante.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Comprovante)
export class ComprovanteResolverBase {
  constructor(
    protected readonly service: ComprovanteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Comprovante",
    action: "read",
    possession: "any",
  })
  async _comprovantesMeta(
    @graphql.Args() args: ComprovanteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Comprovante])
  @nestAccessControl.UseRoles({
    resource: "Comprovante",
    action: "read",
    possession: "any",
  })
  async comprovantes(
    @graphql.Args() args: ComprovanteFindManyArgs
  ): Promise<Comprovante[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Comprovante, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Comprovante",
    action: "read",
    possession: "own",
  })
  async comprovante(
    @graphql.Args() args: ComprovanteFindUniqueArgs
  ): Promise<Comprovante | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Comprovante)
  @nestAccessControl.UseRoles({
    resource: "Comprovante",
    action: "create",
    possession: "any",
  })
  async createComprovante(
    @graphql.Args() args: CreateComprovanteArgs
  ): Promise<Comprovante> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        viagemId: {
          connect: args.data.viagemId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Comprovante)
  @nestAccessControl.UseRoles({
    resource: "Comprovante",
    action: "update",
    possession: "any",
  })
  async updateComprovante(
    @graphql.Args() args: UpdateComprovanteArgs
  ): Promise<Comprovante | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          viagemId: {
            connect: args.data.viagemId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Comprovante)
  @nestAccessControl.UseRoles({
    resource: "Comprovante",
    action: "delete",
    possession: "any",
  })
  async deleteComprovante(
    @graphql.Args() args: DeleteComprovanteArgs
  ): Promise<Comprovante | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Viagem, {
    nullable: true,
    name: "viagemId",
  })
  @nestAccessControl.UseRoles({
    resource: "Viagem",
    action: "read",
    possession: "any",
  })
  async resolveFieldViagemId(
    @graphql.Parent() parent: Comprovante
  ): Promise<Viagem | null> {
    const result = await this.service.getViagemId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
