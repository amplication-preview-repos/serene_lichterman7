/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateViagemArgs } from "./CreateViagemArgs";
import { UpdateViagemArgs } from "./UpdateViagemArgs";
import { DeleteViagemArgs } from "./DeleteViagemArgs";
import { ViagemCountArgs } from "./ViagemCountArgs";
import { ViagemFindManyArgs } from "./ViagemFindManyArgs";
import { ViagemFindUniqueArgs } from "./ViagemFindUniqueArgs";
import { Viagem } from "./Viagem";
import { Comprovante } from "../../comprovante/base/Comprovante";
import { PontoDeEntrega } from "../../pontoDeEntrega/base/PontoDeEntrega";
import { ViagemService } from "../viagem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Viagem)
export class ViagemResolverBase {
  constructor(
    protected readonly service: ViagemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Viagem",
    action: "read",
    possession: "any",
  })
  async _viagemsMeta(
    @graphql.Args() args: ViagemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Viagem])
  @nestAccessControl.UseRoles({
    resource: "Viagem",
    action: "read",
    possession: "any",
  })
  async viagems(@graphql.Args() args: ViagemFindManyArgs): Promise<Viagem[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Viagem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Viagem",
    action: "read",
    possession: "own",
  })
  async viagem(
    @graphql.Args() args: ViagemFindUniqueArgs
  ): Promise<Viagem | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Viagem)
  @nestAccessControl.UseRoles({
    resource: "Viagem",
    action: "create",
    possession: "any",
  })
  async createViagem(@graphql.Args() args: CreateViagemArgs): Promise<Viagem> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        comprovantes: args.data.comprovantes
          ? {
              connect: args.data.comprovantes,
            }
          : undefined,

        pontoDeEntregas: args.data.pontoDeEntregas
          ? {
              connect: args.data.pontoDeEntregas,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Viagem)
  @nestAccessControl.UseRoles({
    resource: "Viagem",
    action: "update",
    possession: "any",
  })
  async updateViagem(
    @graphql.Args() args: UpdateViagemArgs
  ): Promise<Viagem | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          comprovantes: args.data.comprovantes
            ? {
                connect: args.data.comprovantes,
              }
            : undefined,

          pontoDeEntregas: args.data.pontoDeEntregas
            ? {
                connect: args.data.pontoDeEntregas,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Viagem)
  @nestAccessControl.UseRoles({
    resource: "Viagem",
    action: "delete",
    possession: "any",
  })
  async deleteViagem(
    @graphql.Args() args: DeleteViagemArgs
  ): Promise<Viagem | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Comprovante, {
    nullable: true,
    name: "comprovantes",
  })
  @nestAccessControl.UseRoles({
    resource: "Comprovante",
    action: "read",
    possession: "any",
  })
  async resolveFieldComprovantes(
    @graphql.Parent() parent: Viagem
  ): Promise<Comprovante | null> {
    const result = await this.service.getComprovantes(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PontoDeEntrega, {
    nullable: true,
    name: "pontoDeEntregas",
  })
  @nestAccessControl.UseRoles({
    resource: "PontoDeEntrega",
    action: "read",
    possession: "any",
  })
  async resolveFieldPontoDeEntregas(
    @graphql.Parent() parent: Viagem
  ): Promise<PontoDeEntrega | null> {
    const result = await this.service.getPontoDeEntregas(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
